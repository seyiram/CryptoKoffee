// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DonationEvent extends ethereum.Event {
  get params(): DonationEvent__Params {
    return new DonationEvent__Params(this);
  }
}

export class DonationEvent__Params {
  _event: DonationEvent;

  constructor(event: DonationEvent) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get donor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentEvent extends ethereum.Event {
  get params(): PaymentEvent__Params {
    return new PaymentEvent__Params(this);
  }
}

export class PaymentEvent__Params {
  _event: PaymentEvent;

  constructor(event: PaymentEvent) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get description(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class WalletInfoEvent extends ethereum.Event {
  get params(): WalletInfoEvent__Params {
    return new WalletInfoEvent__Params(this);
  }
}

export class WalletInfoEvent__Params {
  _event: WalletInfoEvent;

  constructor(event: WalletInfoEvent) {
    this._event = event;
  }

  get walletAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentWalletBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get numOfDonations(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CryptoKoffee__getWalletResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getWalletAddress(): Address {
    return this.value0;
  }

  getWalletBalance(): BigInt {
    return this.value1;
  }

  getNumOfDonations(): BigInt {
    return this.value2;
  }
}

export class CryptoKoffee__paymentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getTimeStamp(): BigInt {
    return this.value1;
  }

  getSender(): Address {
    return this.value2;
  }

  getRecipient(): Address {
    return this.value3;
  }

  getDescription(): string {
    return this.value4;
  }
}

export class CryptoKoffee extends ethereum.SmartContract {
  static bind(address: Address): CryptoKoffee {
    return new CryptoKoffee("CryptoKoffee", address);
  }

  getDonationBalance(): BigInt {
    let result = super.call(
      "getDonationBalance",
      "getDonationBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getDonationBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonationBalance",
      "getDonationBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWallet(): CryptoKoffee__getWalletResult {
    let result = super.call(
      "getWallet",
      "getWallet():(address,uint256,uint256)",
      [],
    );

    return new CryptoKoffee__getWalletResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getWallet(): ethereum.CallResult<CryptoKoffee__getWalletResult> {
    let result = super.tryCall(
      "getWallet",
      "getWallet():(address,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CryptoKoffee__getWalletResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  hash(_string: string): Bytes {
    let result = super.call("hash", "hash(string):(bytes32)", [
      ethereum.Value.fromString(_string),
    ]);

    return result[0].toBytes();
  }

  try_hash(_string: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hash", "hash(string):(bytes32)", [
      ethereum.Value.fromString(_string),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payments(param0: Address, param1: BigInt): CryptoKoffee__paymentsResult {
    let result = super.call(
      "payments",
      "payments(address,uint256):(uint256,uint256,address,address,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new CryptoKoffee__paymentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toString(),
    );
  }

  try_payments(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<CryptoKoffee__paymentsResult> {
    let result = super.tryCall(
      "payments",
      "payments(address,uint256):(uint256,uint256,address,address,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CryptoKoffee__paymentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toString(),
      ),
    );
  }

  totalBalance(): BigInt {
    let result = super.call("totalBalance", "totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBalance", "totalBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalNumberOfDonations(): BigInt {
    let result = super.call(
      "totalNumberOfDonations",
      "totalNumberOfDonations():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalNumberOfDonations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalNumberOfDonations",
      "totalNumberOfDonations():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateWalletCall extends ethereum.Call {
  get inputs(): CreateWalletCall__Inputs {
    return new CreateWalletCall__Inputs(this);
  }

  get outputs(): CreateWalletCall__Outputs {
    return new CreateWalletCall__Outputs(this);
  }
}

export class CreateWalletCall__Inputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }
}

export class CreateWalletCall__Outputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get donationAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
